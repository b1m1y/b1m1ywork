import React, { useState } from 'react';
import './Auth.css';
import CryptoJS from 'crypto-js';

function Auth({ onClose }) {
    const [server, setServer] = useState('');
    const [login, setLogin] = useState('');
    const [password, setPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [rememberMe, setRememberMe] = useState(false);

    const handleLogin = async () => {
        if (!server) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞');
            return;
        }
        try {
            const response = await authenticate(login, password);
            if (response.ok) {
                //alert(response);
                onClose(true);
            } else {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message);
        }
    };

    const authenticate = async (username, password) => {
        const url = `http://${server}/v1/user/auth`;
        const hashedPassword = CryptoJS.MD5(password).toString();
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞:', url);
        console.log('–° –¥–∞–Ω–Ω—ã–º–∏:', { username });
        const res = await fetch(url, {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
                "Connection": "Close",
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                Login: username,
                Password: hashedPassword,
                Version: '',
                MACAddress: '',
                Authentication: 0,
                FQDN: '',
                Hostname: '',
                ClientType: 0,
                AppInstanceID: ''
            })
        });
        return res;
    };

    return (
        <div className="auth-modal">
            <h2>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
            <div className="auth-form">
                <div className="auth-row">
                    <label>–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:</label>
                    <input
                        type="text"
                        value={server}
                        onChange={(e) => setServer(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞"
                    />
                </div>
                <div className="auth-row">
                    <label>–õ–æ–≥–∏–Ω:</label>
                    <input
                        type="text"
                        value={login}
                        onChange={(e) => setLogin(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
                    />
                </div>
                <div className="auth-row">
                    <label>–ü–∞—Ä–æ–ª—å:</label>
                    <div className="password-container">
                        <input
                            type={showPassword ? "text" : "password"}
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                        />
                        <button
                            type="button"
                            onMouseDown={() => setShowPassword(true)}
                            onMouseUp={() => setShowPassword(false)}
                            onMouseLeave={() => setShowPassword(false)}
                            className="password-toggle"
                        >
                            {showPassword ? 'üôÜ' : 'üôÖ'}
                        </button>
                    </div>
                </div>
                <div className="auth-row remember-me">
                    <label>
                        <input
                            type="checkbox"
                            checked={rememberMe}
                            onChange={(e) => setRememberMe(e.target.checked)}
                        />
                        –ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è
                    </label>
                </div>
                <div className="auth-row">
                    <a href="#" className="forget-me">–ó–∞–±—ã—Ç—å –º–µ–Ω—è</a>
                </div>
                <div className="auth-buttons">
                    <button onClick={handleLogin}>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –°–ê–†–£–°</button>
                    <button onClick={() => onClose(false)}>–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        </div>
    );
}

export default Auth;